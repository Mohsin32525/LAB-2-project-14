``` import requests
from requests.adapters import HTTPAdapter, Retry
import json
import re
```
def get_kingdom(entry):
  if "Metazoa" in entry["organism"]["lineage"]:
    k = "Metazoa"
  elif "Viridiplantae" in entry["organism"]["lineage"]:
    k = "Viridiplantae"
  elif "Fungi" in entry["organism"]["lineage"]:
    k = "Fungi"
  else:
    k = "Other"
  return k

def filter_entry_positive(entry):
    try:
        e_pos = int(entry["features"][0]["location"]["end"]["value"])
        assert(entry["features"][0]["description"] == "")
        assert(e_pos > 13)
    except:
        return False
    return True

def filter_entry_negative(entry):
    return True

def json_to_tsv_positive(entry):
    return (entry["primaryAccession"],
            entry["organism"]["scientificName"],
            get_kingdom(entry),
            entry["sequence"]["length"],
            entry["features"][0]["location"]["end"]["value"])

def json_to_tsv_negative(entry):
    try:
        k = [l for l in entry["lineages"] if l["rank"]=="kingdom"][0]["scientificName"]
    except:
        k = "Other"
    tm = False
    for f in entry["features"]:
        if f["type"]=="Transmembrane":
          if re.search("Helical",f["description"]):
            if f["location"]["start"]["value"]<=90:
              tm = True
              break

    return (entry["primaryAccession"],
            entry["organism"]["scientificName"],
            get_kingdom(entry),
            entry["sequence"]["length"],
            tm)

def get_next_link(headers):
    if "Link" in headers:
        match = re_next_link.match(headers["Link"])
        if match:
            return match.group(1)

def get_batch(batch_url):
    while batch_url:
        response = session.get(batch_url)
        response.raise_for_status()
        total = response.headers["x-total-results"]
        yield response, total
        batch_url = get_next_link(response.headers)
        print(batch_url)

def get_dataset(search_url, filter_function, json_to_tsv_function, columns, output_file_name, output_fasta_file_name):
    n_total, n_filtered = 0, 0
    with open(output_file_name, 'w') as ofs:
      print(*columns, sep="\t", file=ofs)
      with open(output_fasta_file_name, 'w') as ofs_fasta:
        for batch, total in get_batch(search_url):
          batch_json = json.loads(batch.text)
          for entry in batch_json["results"]:
            n_total += 1
            if filter_function(entry):
              n_filtered += 1
              fields = json_to_tsv_function(entry)
              print(*fields, sep="\t", file=ofs)
              print(">", entry["primaryAccession"], sep="", file=ofs_fasta)
              print(entry["sequence"]["value"], file=ofs_fasta)
        ofs_fasta.close()
      ofs.close
    print(f"Total: {n_total}, filtered: {n_filtered}")
re_next_link = re.compile(r'<(.+)>; rel="next"')
retries = Retry(total=5, backoff_factor=0.25, status_forcelist=[500, 502, 503, 504])
session = requests.Session()
session.mount("https://", HTTPAdapter(max_retries=retries))
url_positive="https://rest.uniprot.org/uniprotkb/search?format=json&query=%28%28existence%3A1%29+AND+%28taxonomy_id%3A2759%29+AND+%28ft_signal_exp%3A*%29+AND+%28length%3A%5B40+TO+*%5D%29+AND+%28reviewed%3Atrue%29+AND+%28fragment%3Afalse%29%29&size=500"
url_negative="https://rest.uniprot.org/uniprotkb/search?format=json&query=%28%28fragment%3Afalse%29+AND+%28reviewed%3Atrue%29+AND+%28existence%3A1%29+AND+%28taxonomy_id%3A2759%29+AND+%28length%3A%5B40+TO+*%5D%29+AND+NOT+%28ft_signal%3A*%29+AND+%28cc_scl_term_exp%3ASL-0091+OR+cc_scl_term_exp%3ASL-0191+OR+cc_scl_term_exp%3ASL-0173+OR+cc_scl_term_exp%3ASL-0209+OR+cc_scl_term_exp%3ASL-0204+OR+cc_scl_term_exp%3ASL-0039%29%29&size=500"
col_negative = ["Accession", "Organism", "Kingdom", "Sequence length", "N-term transmembrane"]
get_dataset(url_positive, filter_entry_positive, json_to_tsv_positive, col_positive, "positive.tsv", "positive.fasta")
get_dataset(url_negative, filter_entry_negative, json_to_tsv_negative, col_negative, "negative.tsv", "negative.fasta")
import pandas as pd

negative_set = pd.read_csv("negative.tsv", sep="\t")
positive_set = pd.read_csv("positive.tsv", sep="\t")

print(len(positive_set))
print(len(negative_set))
print(len(negative_set[negative_set["N-term transmembrane"] == True]))

2932
20615
2465
